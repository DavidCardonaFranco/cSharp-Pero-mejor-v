/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParserConstants.java */
package Aritmetica;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ExpressionParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 5;
  /** RegularExpression Id. */
  int DECIMAL_INTEGER_LITERAL = 6;
  /** RegularExpression Id. */
  int DECIMAL_DIGIT = 7;
  /** RegularExpression Id. */
  int INTEGER_TYPE_SUFFIX = 8;
  /** RegularExpression Id. */
  int REAL_LITERAL = 9;
  /** RegularExpression Id. */
  int REAL_TYPE_SUFFIX = 10;
  /** RegularExpression Id. */
  int INTEGER = 11;
  /** RegularExpression Id. */
  int FLOAT = 12;
  /** RegularExpression Id. */
  int LONG = 13;
  /** RegularExpression Id. */
  int DOUBLE = 14;
  /** RegularExpression Id. */
  int LPAREN = 15;
  /** RegularExpression Id. */
  int RPAREN = 16;
  /** RegularExpression Id. */
  int POINT = 17;
  /** RegularExpression Id. */
  int COMMA = 18;
  /** RegularExpression Id. */
  int DOSPUNTOS = 19;
  /** RegularExpression Id. */
  int PUNTOCOMA = 20;
  /** RegularExpression Id. */
  int ASSIGNMENT_OPERATOR = 21;
  /** RegularExpression Id. */
  int MINUS = 22;
  /** RegularExpression Id. */
  int PLUS = 23;
  /** RegularExpression Id. */
  int STAR = 24;
  /** RegularExpression Id. */
  int SLASH = 25;
  /** RegularExpression Id. */
  int PLUSPLUS = 26;
  /** RegularExpression Id. */
  int MINMIN = 27;
  /** RegularExpression Id. */
  int IDENTIFIER = 28;
  /** RegularExpression Id. */
  int SIMPLE_IDENTIFIER = 29;
  /** RegularExpression Id. */
  int AVIABLE_IDENTIFIER = 30;
  /** RegularExpression Id. */
  int BASIC_IDENTIFIER = 31;
  /** RegularExpression Id. */
  int IDENTIFIER_PART_CHARACTER = 32;
  /** RegularExpression Id. */
  int DECIMAL_DIGIT_CHARACTER = 33;
  /** RegularExpression Id. */
  int IDENTIFIER_START_CHARACTER = 34;
  /** RegularExpression Id. */
  int UNDERSCORE_CHARACTER = 35;
  /** RegularExpression Id. */
  int LETTER_CHARACTER = 36;
  /** RegularExpression Id. */
  int UNICODE_LETTER = 37;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_INTEGER_LITERAL>",
    "<DECIMAL_DIGIT>",
    "<INTEGER_TYPE_SUFFIX>",
    "<REAL_LITERAL>",
    "<REAL_TYPE_SUFFIX>",
    "\"int\"",
    "\"float\"",
    "\"long\"",
    "\"double\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\":\"",
    "\";\"",
    "<ASSIGNMENT_OPERATOR>",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"/\"",
    "\"++\"",
    "\"--\"",
    "<IDENTIFIER>",
    "<SIMPLE_IDENTIFIER>",
    "<AVIABLE_IDENTIFIER>",
    "<BASIC_IDENTIFIER>",
    "<IDENTIFIER_PART_CHARACTER>",
    "<DECIMAL_DIGIT_CHARACTER>",
    "<IDENTIFIER_START_CHARACTER>",
    "\"_\"",
    "<LETTER_CHARACTER>",
    "<UNICODE_LETTER>",
  };

}
